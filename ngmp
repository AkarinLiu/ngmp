#!/bin/bash
clear
echo "Welecome to NGMP!"
echo "This script will help you install Nginx, MariaDB and PHP on your system."
echo "Select HTTP Server Type:"
echo "1. Nginx"
echo "2. OpenResty"
read -p "Enter your choice: " http_choice
if [ $http_choice -eq 1 ]; then
    http_server="nginx"
elif [ $http_choice -eq 2 ]; then
    http_server="openresty"
else
    echo "Invalid choice"
    exit 1
fi
if [ $http_server = "nginx" ]; then
    echo "Select Nginx Version:"
    echo "1. 1.25.4"
    echo "2. 1.24.0"
    echo "3. 1.22.1"
    echo "4. 1.20.2"
    echo "5. 1.18.0"
    read -p "Enter your choice: " nginx_choice
    if [ $nginx_choice -eq 1 ]; then
        nginx_version="1.25.4"
    elif [ $nginx_choice -eq 2 ]; then
        nginx_version="1.24.0"
    elif [ $nginx_choice -eq 3 ]; then
        nginx_version="1.22.1"
    elif [ $nginx_choice -eq 4 ]; then
        nginx_version="1.20.2"
    elif [ $nginx_choice -eq 5 ]; then
        nginx_version="1.18.0"
    else
    echo "Invalid choice"
    exit 1
    fi
elif [ $http_server = "openresty"]; them
    echo "Select OpenResty Version:"
    echo "1. 1.25.3.1"
    echo "2. 1.21.4.3"
    echo "3. 1.19.9.1"
    read -p "Enter your choice: " openresty_choice
    if [ $openresty_choice -eq 1 ]; then
        openresty_version="1.25.3.1"
    elif [ $openresty_choice -eq 2 ]; then
        openresty_version="1.21.4.3"
    elif [ $openresty_choice -eq 3 ]; then
        openresty_version="1.19.9.1"
    else
        echo "Invalid choice"
        exit 1
    fi
fi
echo "Select PHP Version:"
echo "1. 8.3"
echo "2. 8.2"
echo "3. 8.1"
echo "4. 8.0"
echo "5. 7.4"
read -p "Enter your choice: " php_choice
if [ $php_choice -eq 1 ]; then
    php_version="8.3"
elif [ $php_choice -eq 2 ]; then
    php_version="8.2"
elif [ $php_choice -eq 3 ]; then
    php_version="8.1"
elif [ $php_choice -eq 4 ]; then
    php_version="8.0"
elif [ $php_choice -eq 5 ]; then
    php_version="7.4"
else
    echo "Invalid choice"
    exit 1
fi
echo "Select MariaDB Version:"
echo "1. 11.4.1"
echo "2. 10.11.7"
echo "3. 10.6.17"
echo "4. 10.5.24"
echo "5. 10.4.33"
echo "6. None"
read -p "Enter your choice: " mariadb_choice
if [ $mariadb_choice -eq 1 ]; then
    mariadb_version="11.4.1"
elif [ $mariadb_choice -eq 2 ]; then
    mariadb_version="10.11.7"
elif [ $mariadb_choice -eq 3 ]; then
    mariadb_version="10.6.17"
elif [ $mariadb_choice -eq 4 ]; then
    mariadb_version="10.5.24"
elif [ $mariadb_choice -eq 5 ]; then
    mariadb_version="10.4.33"
elif [ $mariadb_choice -eq 6 ]; then
    mariadb_version="none"
else
    echo "Invalid choice"
    exit 1
fi
if [ $mariadb_version == "none" ]; then
    echo "MariaDB will not be installed"
else
    echo "Select MariaDB Mirror:"
    echo "1. TUNA"
    echo "2. USTC"
    echo "3. Aliyun"
    read -p "Enter your choice: " mariadb_mirror_choice
    if [ $mariadb_mirror_choice -eq 1 ]; then
        mariadb_mirror="https://mirrors.tuna.tsinghua.edu.cn/mariadb"
    elif [ $mariadb_mirror_choice -eq 2 ]; then
        mariadb_mirror="https://mirrors.ustc.edu.cn/mariadb"
    elif [ $mariadb_mirror_choice -eq 3 ]; then
        mariadb_mirror="https://mirrors.aliyun.com/mariadb"
    else
        echo "Invalid choice"
        exit 1
    fi
    echo "MariaDB using Binary Install? [Y/n]"
    read -p "Enter your choice: " mariadb_binary_install_choice
    if [ $mariadb_binary_install_choice == "Y" ] || [ $mariadb_binary_install_choice == "y" ]; then
        mariadb_binary_install="true"
    else
        mariadb_binary_install="false"
    fi
fi
echo "Using Multi-Jobs Compile?"
echo "1. No"
echo "2. 2 Jobs"
echo "3. 4 Jobs"
echo "4. 6 Jobs"
echo "5. 8 Jobs"
read -p "Enter your choice: " jobs_choice
if [ $jobs_choice -eq 1 ]; then
    jobs="1"
elif [ $jobs_choice -eq 2 ]; then
    jobs="2"
elif [ $jobs_choice -eq 3 ]; then
    jobs="4"
elif [ $jobs_choice -eq 4 ]; then
    jobs="6"
elif [ $jobs_choice -eq 5 ]; then
    jobs="8"
else
    echo "Invalid choice"
    exit 1
fi
if [ $http_server -eq "nginx" ]; then
    echo "Nginx Version: $nginx_version"
elif [ $http_server -eq "openresty" ]; then
    echo "OpenResty Version: $openresty_version"
fi
echo "PHP Version: $php_version"
echo "MariaDB Version: $mariadb_version"
mkdir $HOME/ngmp-data
cd $HOME/ngmp-data
# Install Dependency
if [ -f /usr/bin/apt ];
then
    apt update
    apt install -y build-essential libncurses5 libpcre3 lua5.4 libpcre3-dev zlib1g-dev libssl-dev git libxml2-dev autoconf bison re2c pkg-config libsqlite3-dev libcurl4-openssl-dev libonig-dev libboost-dev libreadline-dev  gcc g++ cmake zlib1g-dev libaio-dev curl libpng-dev
elif [ -f /usr/bin/yum ];
then
    yum update -y
    yum groupinstall "Development Tools"
    yum install -y gcc make boost-devel lua-devel pcre-devel zlib-devel openssl-devel git libxml2-devel autoconf bison re2c pkg-config libsqlite3-devel libcurl-devel oniguruma-devel curl libpng-devel ncurses
else
    echo "Unsupported OS"
    exit 1
fi
if [ $http_server -eq "nginx" ]; then
    # Download Nginx
    echo "Downloading Nginx $nginx_version"
    wget --no-clobber https://nginx.org/download/nginx-$nginx_version.tar.gz
    tar -xvf nginx-$nginx_version.tar.gz
    # Build Nginx
    cd nginx-$nginx_version
    ./configure --prefix=/usr/local/nginx --with-http_ssl_module --with-http_v2_module --with-http_stub_status_module --with-http_gzip_static_module --with-pcre  --with-openssl-opt="include=/usr/include/openssl" --with-openssl-opt="lib=/usr/lib" --with-openssl-opt='enable-tls1_3' --with-openssl-opt='enable-tls1_2' --user=www-data --group=www-data --with-ld-opt="-Wl,-rpath,/usr/local/php/lib/" --pid-path=/var/run/nginx.pid --with-cc-opt="-O0"
    if [ $jobs == "1" ]; then
        make && make install
    elif [ $jobs == "2" ]; then
        make -j2 && make install
    elif [ $jobs == "4" ]; then
        make -j4 && make install
    elif [ $jobs == "6" ]; then
        make -j6 && make install
    elif [ $jobs == "8" ]; then
        make -j8 && make install
    fi
    cd ..
elif [ $http_server -eq "openresty" ]; then
    # Download OpenResty
    echo "Downloading OpenResty $openresty_version"
    wget --no-clobber https://openresty.org/download/openresty-$openresty_version.tar.gz
    tar -xvf openresty-$openresty_version.tar.gz
    # Build OpenResty
    cd openresty-$openresty_version
    ./configure --prefix=/usr/local/openresty --with-http_ssl_module --with-http_v2_module --with-http_stub_status_module --with-http_gzip_static_module --with-pcre  --with-openssl-opt="include=/usr/include/openssl" --with-openssl-opt="lib=/usr/lib" --with-openssl-opt='enable-tls1_3' --with-openssl-opt='enable-tls1_2' --user=www-data --group=www-data --with-ld-opt="-Wl,-rpath,/usr/local/php/lib/" --pid-path=/var/run/openresty.pid --with-cc-opt="-O0" --with-luajit
    if [ $jobs == "1" ]; then
        make && make install
    elif [ $jobs == "2" ]; then
        make -j2 && make install
    elif [ $jobs == "4" ]; then
        make -j4 && make install
    elif [ $jobs == "6" ]; then
        make -j6 && make install
    elif [ $jobs == "8" ]; then
        make -j8 && make install
    fi
    cd ..
fi
# Download PHP and MariaDB
echo "Downloading PHP $php_version"
git clone https://gitee.com/mirrors/php.git -b PHP-$php_version
# Build PHP
cd php
./buildconf
./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data --enable-mbstring --enable-zip --enable-gd --with-jpeg-dir --with-png-dir --with-freetype-dir --enable-mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-sqlite --with-xml  --with-iconv-dir --with-xmlrpc --enable-soap --with-gettext --with-curl --enable-json --enable-openssl --enable-ftp --with-zlib --enable-gd-native-ttf --with-mhash --enable-pcntl --enable-bcmath --with-zlib --enable-sockets --enable-sysvmsg --enable-sysvsem --enable-sysvshm --enable-mbress --with-openssl --with-openssl-dir --with-openssl-opt="enable-tls1_3" --with-openssl-opt="enable-tls1_2" --enable-opcache 
if [ $jobs == "1" ]; then
    make && make install
elif [ $jobs == "2" ]; then
    make -j2 && make install
elif [ $jobs == "4" ]; then
    make -j4 && make install
elif [ $jobs == "6" ]; then
    make -j6 && make install
elif [ $jobs == "8" ]; then
    make -j8 && make install
fi
cd ..
# Download MariaDB
if [ $mariadb_version == "none" ]; then
    echo "MariaDB version not specified, skipping download"
else
    echo "Downloading MariaDB $mariadb_version"
    if [ $mariadb_binary_install == "true" ]; then
        wget --no-clobber $mariadb_mirror/mariadb-$mariadb_version/bintar-linux-systemd-x86_64/mariadb-$mariadb_version-linux-systemd-x86_64.tar.gz
        tar -xvf mariadb-$mariadb_version-linux-systemd-x86_64.tar.gz
    else
        wget --no-clobber $mariadb_mirror/mariadb-$mariadb_version/source/mariadb-$mariadb_version.tar.gz
        tar -xvf mariadb-$mariadb_version.tar.gz
    fi
    # Install MariaDB
    if [ $mariadb_binary_install == true ]; then
        mv ../mariadb-$mariadb_version-linux-systemd-x86_64 /usr/local/mysql
        cd /usr/local/mysql
        useradd -s /sbin/nologin mysql
        groupadd mysql
        chown -R mysql:mysql /usr/local/mysql
        /usr/local/mysql/scripts/mysql_install_db --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data
        /usr/local/mysql/bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data
        cp support-files/systemd/mariadb.service /etc/systemd/system/
    else
        cd ../mariadb-$mariadb_version
        cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \ -DMYSQL_DATADIR=/usr/local/mariadb/data \ -DSYSCONFDIR=/etc \ -DWITH_INNOBASE_STORAGE_ENGINE=1 \ -DWITH_READLINE=1 \ -DWITH_SSL=system \ -DWITH_ZLIB=system \ -DWITH_LIBWRAP=0 \ -DMYSQL_UNIX_ADDR=/var/run/mariadb/mariadb.sock \ -DDEFAULT_CHARSET=utf8mb4 \ -DDEFAULT_COLLATION=utf8mb4_unicode_ci \ -DEXTRA_CHARSETS=all \ -DENABLED_LOCAL_INFILE=1 \ -DWITH_EMBEDDED_SERVER=1 \ -DENABLED_DOWNLOADS=1
        if [ $jobs == "1" ]; then
            make && make install
        elif [ $jobs == "2" ]; then
            make -j2 && make install
        elif [ $jobs == "4" ]; then
            make -j4 && make install
        elif [ $jobs == "6" ]; then
            make -j6 && make install
        elif [ $jobs == "8" ]; then
            make -j8 && make install
        fi
    useradd -s /sbin/nologin mysql
    groupadd -g mysql
    chown -R mysql:mysql /usr/local/mysql
    ./scripts/mysql_install_db --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data
    /usr/local/mysql/bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data
    cp support-files/systemd/mariadb.service /etc/systemd/system/
fi
cd ..
# Add PATH
if [ $http_server == "nginx" ]; then
    ln -sf /usr/local/nginx/sbin/nginx /usr/local/sbin/nginx
elif [ $http_server == "openresty" ]; then
    ln -sf /usr/local/openresty/nginx/sbin/nginx /usr/local/sbin/nginx
fi
ln -sf /usr/local/php/bin/php /usr/local/bin/php
ln -sf /usr/local/php/sbin/php-fpm /usr/local/sbin/php-fpm
if [ $mariadb_version == "none" ]; then
    echo "MariaDB is not installed, skipping..."
else
    ln -sf /usr/local/mysql/bin/mysql /usr/local/bin/mysql
    ln -sf /usr/local/mysql/bin/mysqladmin /usr/local/bin/mysqladmin
    ln -sf /usr/local/mysql/bin/mysqldump /usr/local/bin/mysqldump
    ln -sf /usr/local/mysql/bin/mysqlimport /usr/local/bin/mysqlimport
    ln -sf /usr/local/mysql/bin/mysqlcheck /usr/local/bin/mysqlcheck
    ln -sf /usr/local/mysql/bin/mysql_secure_installation /usr/local/bin/mysql_secure_installation
    ln -sf /usr/local/mysql/bin/mariadb /usr/local/bin/mariadb
    ln -sf /usr/local/mysql/bin/mariadbd /usr/local/bin/mariadbd
    ln -sf /usr/local/mysql/bin/mariadbimport /usr/local/bin/mariadbimport
    ln -sf /usr/local/mysql/bin/mariadbadmin /usr/local/bin/mariadbadmin
    ln -sf /usr/local/mysql/bin/mariadbdump /usr/local/bin/mariadbdump
    ln -sf /usr/local/mysql/bin/mariadb-secure-installation /usr/local/bin/mariadb-secure-installation
fi
# Install Service
if [ $http_server == "nginx"]; then
    wget -U --force-update -O /etc/systemd/system/nginx.service https://mirror.ghproxy.com/https://raw.githubusercontent.com/AkarinLiu/ngmp/master/nginx.service
    systemctl enable --now  nginx.service
elif [ $http_server == "openresty" ]; then
    wget -U --force-update -O /etc/systemd/system/openresty.service https://mirror.ghproxy.com/https://raw.githubusercontent.com/AkarinLiu/ngmp/master/openresty.service
    systemctl enable --now  openresty.service
fi
wget -U --force-update -O /etc/systemd/system/php-fpm.service https://mirror.ghproxy.com/https://raw.githubusercontent.com/AkarinLiu/ngmp/master/php-fpm.service
systemctl enable --now  php-fpm.service
# Install Composer
curl -sS https://getcomposer.org/installer | php
mv composer.phar /usr/local/bin/composer
# End
echo "Install Complete"
echo "Please run mysql_secure_installation to configure your MariaDB installation."
cd 